-- INT (WHOLE NUMBERS
-- DECIMAL (M,N) (M is the total number of digits you want to store in the number) (N is total number of digits you wanna store after the decimal )
--(decimal numbers - exact value)
-- eg, DECIMAL(10,4)
-- VARCHAR(l) (string of text of length l) e.g. varchar(100)
-- BLOB (Binary large object, Stores large data) (images or files)
-- DATE (yyyy-mm-dd)
-- TIMESTAMP (yyyy-mm-dd HH:MM:SS) - USED For recording
--CREATING and defining the schema of A TABLE
--major VARCHAR(20) UNIQUE
  --student_id INT PRIMARY KEY,
  
CREATE TABLE student(
    student_id INT AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    
    major VARCHAR(20) DEFAULT 'undecided',
    PRIMARY KEY (student_id)
);

Describe student;

drop table student; --#to delete table

--modifiying the table
alter table student ADD gpa DECIMAL(3, 2);

alter table student DROP COLUMN gpa;

----INSERTING DATA

Select * From student;
INSERT INTO student(name, major) VALUES('Jack', 'Biology' );
INSERT INTO student(name, major) VALUES('Kate', 'Sociology' );
--INSERT INTO student VALUES(1, 'Jack', 'Biology' );
--INSERT INTO student VALUES(2, 'Kate', 'Sociology' );
INSERT INTO student VALUES(3, NULL, 'Chemistry' );
-- Specifying the peice of info
---INSERT INTO student(student_id, name) VALUES(3, 'Claire');
--INSERT INTO student VALUES(3, NULL, 'Chemistry' );
INSERT INTO student VALUES(4, 'Jack', 'Biology' );
INSERT INTO student VALUES(5, 'Mike', 'Computer Science');
---------



---------INSERTING INFO IN DB
----------NOT NULL - allows us to define that a particular column in the table cannot be null, you can't leave that value empty
----------Unique is another constrain like NOT NULL and does not allow duplicate values
--------- Undecided is used when we don't have a value/ info


--------Update and Delete info -----------------
CREATE TABLE student(
    student_id INT,
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20) DEFAULT 'undecided',
    PRIMARY KEY (student_id)
);

Describe student;

drop table student; --#to delete table
Select * From student; --#(tells the RDBMS that we want some information from it)
 

INSERT INTO student(name, major) VALUES('Jack', 'Biology' );
INSERT INTO student(name, major) VALUES('Kate', 'Sociology' );
INSERT INTO student VALUES(3, 'Claire', 'Chemistry' );
INSERT INTO student VALUES(4, 'Jack', 'Biology' );
INSERT INTO student VALUES(5, 'Mike', 'Computer Science');

---Changing the name of biology to bio
UPDATE student
SET major = 'Bio'
Where major = 'Biology';

UPDATE student
SET major = 'Comp Sci'
Where student_id = '4';

--Where major = 'Computer Science';
UPDATE student
SET major = 'Biochemistry'
Where major = 'Bio' or major = 'chemistry';

UPDATE student
SET name = 'Tom', major = 'undecided'
Where student_id = 1;

Delete from student
Where name = 'Tom' AND major = 'undecided';
---Where student_id = '5'

----BASIC QUERIES-------
----(TELLS RDBMS THAT WE WANT SOME INFO FROM IT)
SELECT *
FROM student;

SELECT name, major
FROM student;

Select student.name, student.major
FROM student
Order by name Desc;
#by default it is Asc

Select *
FROM student
Order by student_id Asc;

Select *
FROM student
Order by major, student_id Desc;

Select *
FROM student
Order by student_id Desc
Limit 2;

----------Filtering-----------

Select *
FROM student
Where major = 'Biology';

Select *
FROM student
Where major = 'Chemistry';

Select name, major
FROM student
Where major = 'chemistry' or major = 'Biology';

Select name, major
FROM student
Where major = 'chemistry' or name = 'Kate';

-- <,>, <=, >=, =, <> (not equal), AND, OR

Select name, major
FROM student
Where major <> 'chemistry';

Select name, major
FROM student
Where student_id<=3 AND name <> 'Jack';

Select *
FROM student
Where major = 'chemistry' or name = 'Kate';

Select *
FROM student
Where name IN ('Claire', 'Kate', 'Mike');

Select *
FROM student
Where major IN ('Biology', 'Chemistry') AND student_id > 2;

---------Company database into--------

---------Creating company database ---------------


----------creating company database-----------------


CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

---- Super_id is foreign key
----- branch id is foreign
CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

--drop table branch_supplier;

-- -----------------------------------------------------------------------------

-- Corporate
---Its null, null in the end because the branch id has not been created yet
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
--- SYNtax: foe each branch 1) add the employee details without the branch id -> insert the branch values -> update the employee table -> add rest of the employees of the branch
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');


UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

SELECT * from employee;

-- MOre basic queries---

-- Find all emplpyees
SELECT *
From employee;

-- Find all clients
SELECT *
From client;

-- Find all emplpyees ordered by salary
SELECT *
From employee 
ORDER BY salary Desc;

-- Find all emplpyees ordered by sex and name
SELECT *
From employee 
ORDER BY sex, first_name, last_name;

-- Find all emplpyees limited by first 5 entries
SELECT *
From employee 
Limit 5;

-- Find all emplpyees first and last name
SELECT first_name, last_name
From employee;

SELECT first_name AS forename, last_name AS surname
From employee;

-- FInd out all the different genders or value - the key word id distinct
SELECT Distinct sex
From employee;

--functions---
-- FInd the number of employees--
Select COUNT(emp_id)
From employee;

-- FInd the number of female employees born after 1970--
Select COUNT(emp_id)
From employee
Where sex='F' AND birth_day > '1971-01-01';

--FInd the average of all employee salaries
Select AVG(salary)
From employee
Where sex= 'M';

--Find the total of the salaries to check payroll expenditure
Select SUM(salary)
From employee;

--Find how many males and females are
Select COUNT(sex), sex
From employee
Group by sex;

--FInd total sales of each sales man/ emp
Select SUM(total_sales), emp_id
From works_with
Group By emp_id;


----wildcards---
--way to grab data that matches a specific pattern--
---% = any # characters, _ = one character
--FInd any client who are an LLC
Select *
From client
Where client_name LIKE '%LLC';
--% means any number of characters

--Find any branch suppliers who are in label bussiness
Select *
From Branch_Supplier
Where supplier_name LIKE '%label%';

--FInd any employee born in OCtober
Select *
From Employee
Where birth_day Like '____-10-%';
--Where birth_day Like '%-10-%';

--Find any client who are schools
Select *
From Client
Where client_name LIKE '%school%';

--UNION----
---USed to combine the results in multple select statements to one
--FInd a list of employee and branch name
Select first_name
From employee
UNION
Select branch_name
From branch
UNION
Select client_name
From Client;
-- this command must have same number of columns and data type

--FInd the list of all clients & branch suppliers' names
Select client_name, client.branch_id
From client
UNION
Select supplier_name, branch_supplier.branch_id
From branch_supplier;

--Find a list of all money spent and earned by the company
 Select SUM(salary)
 From employee
 UNION
 Select SUM(total_sales)
 From works_with;

 Select salary
 From employee
 UNION
 Select total_sales
 From works_with;

---JOINS---
--TO combine rules from 2 or more table based on related column between them
INSERT into branch values (4, 'buffalo', NULL, NULL);
--- no manager id or branch date

--FInd all branches and the names of their managers
Select employee.emp_id, employee.first_name, branch.branch_name
From employee
JOIN branch
on employee.emp_id = branch.mgr_id;
-- this was an general or inner joint

Select employee.emp_id, employee.first_name, branch.branch_name
From employee
Left JOIN branch
on employee.emp_id = branch.mgr_id;
---here all the values from th left table are included. The left table is the table in the  from statement

Select employee.emp_id, employee.first_name, branch.branch_name
From employee
right JOIN branch
on employee.emp_id = branch.mgr_id;
---here all the values from th right table are included. The right table is the table not in the  from statement

--There is a full outer joint, here you can join the values from both left table and right table

----Nested queries--
--multiple select statements are used to get a piece of information
--FInd names of all the employees who have sold over 30K to a single client
Select employee.first_name, employee.last_name
From employee
Where employee.emp_id IN(
    Select works_with.emp_id
From works_with
Where works_with.total_sales > 30000    
);

--Find all clients who are handled by the branch
-- that michael Scott manages
-- Assume you know Michael's ID
Select Client.client_name
From client
where client.branch_id IN(
Select branch. branch_id
From branch
where branch. mgr_id = 102
);
--code execition sequence is from inner to outter

Select Client.client_name
From client
where client.branch_id = (
Select branch. branch_id
From branch
where branch. mgr_id = 102
Limit 1
);
-- here the branches are limited to 1, in case the employee managed multiple branches
